import numpy as np


def menu():
    condition = True
    while condition:
        print("Hello! What would you like to do?: \n 1. Load information \n 2. Look for a route \n 3. Exit")
        choice = int(input())
        if choice == 3:
            print("Bye!")
            break
        matrix = open_file()
        if choice == 1:
            shortest_path(matrix)
        elif choice == 2:
            print(process(ask(), matrix), "\n")


def open_file():
    print("Type the file's name: ")
    name = input()
    file = open(name, "r")
    content = file.readlines()
    instructions = []
    size = 0
    # Get amount of nodes
    # Save distance and traffic into instructions array
    for i in content:
        if "," not in i:
            size += 1
        else:
            instructions.append(i)
    # Creation of adjacency adj_matrix
    adj_matrix = np.ones((size, size, 2)) * 999

    # Diagonal of 0s
    for i in range(len(adj_matrix)):
        for j in range((len(adj_matrix))):
            if i == j:
                adj_matrix[i][j] = 0

    # Add distance and traffic to the adjacency matrix
    for i in instructions:
        parts = i.split(",")
        pos1 = int(parts[0].replace("n", ""))
        pos2 = int(parts[1].replace("n", ""))
        dist = int(parts[2])
        level = parts[3].strip()

        if level == "light":
            adj_matrix[pos1][pos2], adj_matrix[pos1][pos2][1] = dist, 100
        elif level == "medium":
            adj_matrix[pos1][pos2], adj_matrix[pos1][pos2][1] = dist, 50
        elif level == "heavy":
            adj_matrix[pos1][pos2], adj_matrix[pos1][pos2][1] = dist, 20

    return adj_matrix


def shortest_path(matrix):
    size = len(matrix[0])
    path_matrix = np.zeros([size, size])
    for k in range(size):
        for j in range(size):
            for i in range(size):
                # Distance
                p1 = matrix[i][k][0]
                p2 = matrix[k][j][0]
                p3 = matrix[i][j][0]
                # Velocity
                v1 = matrix[i][k][1]
                v2 = matrix[k][j][1]
                v3 = matrix[i][j][1]
                if v1 == 0 or v2 == 0 or v3 == 0:
                    continue
                # Time
                t1 = p1/v1
                t2 = p2/v2
                t3 = p3/v3
                # Checks if it's better to pass by an intermediate node or not
                if t1 + t2 < t3:
                    matrix[i][j][0] = p1 + p2
                    path_matrix[i][j] = k
    return path_matrix

def ask():
    print("Start node: ")
    start = int(input())
    print("End node: ")
    end = int(input())
    # Checks if the path between nodes exists
    return start, end


def process(nodes, matrix):
    start = nodes[0]
    end = nodes[1]
    pathMatrix = shortest_path(matrix)
    path = []
    if matrix[start][end][0] != 999:
        # Path rebuilding
        while end != 0:
            path.append(end)
            end = int(pathMatrix[start][end])
        path.append(start)
        return list(reversed(path))

    else:
        return "Sorry, no path!"


if __name__ == "__main__":
    menu()
#print(process(ask()))